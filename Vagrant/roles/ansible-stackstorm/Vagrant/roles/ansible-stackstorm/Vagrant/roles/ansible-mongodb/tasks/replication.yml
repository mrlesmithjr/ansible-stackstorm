---
- name: replication | Checking For Existing Replication Set Keyfile {{ mongodb_replication_keyfile }}
  stat:
    path: "{{ mongodb_replication_keyfile }}"
  register: "mongodb_repl_keyfile"

- name: replication | Generating Replication Set Keyfile
  shell: "openssl rand -base64 741 | xargs echo -n"
  register: "repl_set_key"
  when: >
        not mongodb_repl_keyfile.stat.exists and
        inventory_hostname == mongodb_replication_master

- name: replication | Creating Replication Set Keyfile {{ mongodb_replication_keyfile }}
  file:
    path: "{{ mongodb_replication_keyfile }}"
    state: "touch"
  when: >
        not mongodb_repl_keyfile.stat.exists

- name: replication | Defining Replication Set Key
  set_fact:
    mongodb_replica_set_key: "{{ hostvars[mongodb_replication_master]['repl_set_key']['stdout'] }}"
  when: >
        not mongodb_repl_keyfile.stat.exists and
        inventory_hostname != mongodb_replication_master

- name: replication | Adding Replication Set Key to {{ mongodb_replication_keyfile }}
  lineinfile:
    dest: "{{ mongodb_replication_keyfile }}"
    line: "{{ repl_set_key.stdout }}"
  when: >
        not mongodb_repl_keyfile.stat.exists and
        inventory_hostname == mongodb_replication_master

- name: replication | Adding Replication Set Key to {{ mongodb_replication_keyfile }}
  lineinfile:
    dest: "{{ mongodb_replication_keyfile }}"
    line: "{{ mongodb_replica_set_key }}"
  when: >
        not mongodb_repl_keyfile.stat.exists and
        inventory_hostname != mongodb_replication_master

- name: replication | Setting Permissions on {{ mongodb_replication_keyfile }}
  file:
    path: "{{ mongodb_replication_keyfile }}"
    owner: "mongodb"
    group: "nogroup"
    mode: "u=r,g=,o="

# We do this here in order to setup replication correctly
- name: replication | Restarting MongoDB
  service:
    name: "mongodb"
    state: "restarted"
  when: mongodb_configured.changed

- name: replication | Creating Replication Setup Script
  template:
    src: "repset_init.js.j2"
    dest: "/tmp/repset_init.js"
  when: >
        inventory_hostname == mongodb_replication_master

- name: replication | Checking If Replication Set Has Been Initialized
  stat:
    path: "/var/log/mongodb_replication_set_initialized"
  register: "mongodb_replication_set_initialized"

# This currently does not work
- name: replication | Initializing Replication Set
  command: 'mongo --port {{ mongodb_port }} -u "{{ mongodb_admin_user.name }}" -p "{{ mongodb_admin_user.password }}" --authenticationDatabase "admin" /tmp/repset_init.js'
  register: "mongodb_repl_set_init"
  when: >
        inventory_hostname == mongodb_replication_master and
        not mongodb_replication_set_initialized.stat.exists and
        mongodb_create_users

- name: replication | Initializing Replication Set
  command: 'mongo --port {{ mongodb_port }} /tmp/repset_init.js'
  register: "mongodb_repl_set_init"
  when: >
        inventory_hostname == mongodb_replication_master and
        not mongodb_replication_set_initialized.stat.exists and
        not mongodb_create_users

- name: replication | Marking Replication Set As Initialized
  file:
    path: "/var/log/mongodb_replication_set_initialized"
    state: "touch"
  when: >
        inventory_hostname == mongodb_replication_master and
        mongodb_repl_set_init.changed
